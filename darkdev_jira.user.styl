/* ==UserStyle==
Note: Based on Dark-GitLab - https://gitlab.com/vednoc/dark-gitlab

@name           devdark_jira
@namespace      github.com/wengm/devdark_jira
@description  Dark and light theme for developer often used web sites: wikipedia.org, git-scm.com, lesscss.org etc.
@author       wenijinew (https://gitlab.com/wengm)
@homepageURL  https://gitlab.com/wengm/stylus_dark_dev
@supportURL   https://gitlab.com/wengm/stylus_dark_dev/issues
@updateURL    https://gitlab.com/wengm/stylus_dark_dev/raw/master/dark_dev.user.styl
@preprocessor stylus
@version      0.3.43
@license      MIT

User Customization Configuration
@var select   cg_theme     'Base color-scheme toggle' {
    'Custom colors          *': 'custom',
    'Ericsson                ': 'ericsson',
    'Dark blue (old)         ': 'old-colors',
    'Dark gray (new)         ': 'new-colors',
    'Breeze Dark             ': 'breeze-dark',
    'GitHub Dark             ': 'github-dark',
    'GitHub Dark Mode        ': 'github-dark-mode',
    'Gruvbox Dark Soft       ': 'gruvbox-dark-soft',
    'Gruvbox Dark Medium     ': 'gruvbox-dark-medium',
    'Gruvbox Dark Hard       ': 'gruvbox-dark-hard',
    'Solarized Dark          ': 'solarized-dark',
    'Dracula                 ': 'dracula',
    'Nord Dark               ': 'nord-dark',
    'Arc Dark                ': 'arc-dark',
    'Moonlight               ': 'moonlight',
    'Monokai                 ': 'monokai',
    'Horizon                 ': 'horizon',
    'Doom One                ': 'doom-one',
    'Deep Dark               ': 'deep-dark',
    'Brave Dark              ': 'brave-dark',
    'Twilight                ': 'twilight',
    'Ubuntu                  ': 'ubuntu',
}
@var color    cg_bg        'Base background color' #292929
@var color    cg_fg        'Base foreground color' #e6e6e6
@var color    cg_ac        'Base accent color    ' #d47d3f
@var range    cg_sat       'Adjust saturation of syntax colors' [0, -50, 40, 0.01]
@var range    cg_lig       'Adjust lightness of syntax colors' [0, -30, 30, 0.01]
@var color    _inverse     'Button inverse color ' #ffffff
@var color    _shadow      'Shadow color         ' #00000040

@var checkbox pcs_enable 'Apply when `(prefers-color-scheme: dark)` is enabled' 0
@var text     ui_font    'Custom UI font' '"font_name"'
@var text     mono_font  'Custom mono font' '"font_name"'
@var text     emoji_font 'Custom emoji font' '"font_name"'
@var text     a_radius   'Avatars: Custom border radius' 25%
@var range    f_size     'Font Base Size' [15, 10, 30, 5]
@var range    hb_size    'Headline Base Size' [35, 30, 40, 5]
@var text     h_step     'Headline Redue Step' '5'
@var range    md_img_o   'Markdown: Default image opacity' [1, 0.0, 1, 0.01]
@var checkbox ic_invert  'Chromium: Invert icons in Shadow DOM' 1
@var checkbox img_invert 'Invert illustrations to dark colors' 1
@var checkbox nb_height  'Navbar: Increase height' 1
@var checkbox nb_fanary  'Navbar: Show canary badge' 1
@var checkbox c_hl_none  'Code: Use theme colors for "none" syntax hl theme' 1
@var checkbox c_ide      'Code: Enable IDE styles' 1
@var checkbox c_monaco   'Code: Enable Monaco Editor styles' 1
@var checkbox pipelines  'CI/CD: Compact pipelines' 0
@var checkbox dgl_alert  'Profile: Enable Dark-GitLab announcements' 0
@var checkbox sb_enable  'Global: Enable theme scrollbars' 1
==/UserStyle== */

/* static aliases */
t       = transparent
i       = !important

/{ /*START: Color Framework - QUESTION: WHY / MUST BEFORE { HERE*/

    // Color-scheme Picker Definition
    // BG: Background-color; FG: Color; AC: Accent Color
    ColorSchemes = {
        'custom':                   { BG:   cg_bg, FG:   cg_fg, AC:   cg_ac }
        'ericsson':                 { BG: #0C0C0C, FG: #F2F2F2, AC: #008CFF }
        'old-colors':               { BG: #1f232a, FG: #eeeeee, AC: #7289da }
        'new-colors':               { BG: #292929, FG: #e6e6e6, AC: #d47d3f }
        'breeze-dark':              { BG: #232629, FG: #eff0f1, AC: #3daee9 }
        'github-dark':              { BG: #181818, FG: #e6e6e6, AC: #4f8cc9 }
        'github-dark-mode':         { BG: #0d1117, FG: #c9d1d9, AC: #58a6ff }
        'gruvbox-dark-soft':        { BG: #32302f, FG: #fbf1c7, AC: #d65d0e }
        'gruvbox-dark-medium':      { BG: #282828, FG: #fbf1c7, AC: #d65d0e }
        'gruvbox-dark-hard':        { BG: #1c2021, FG: #fbf1c7, AC: #d65d0e }
        'solarized-dark':           { BG: #03303c, FG: #bcc5c5, AC: #859900 }
        'dracula':                  { BG: #282a36, FG: #f8f8f2, AC: #bd93f9 }
        'nord-dark':                { BG: #2e3440, FG: #eceff4, AC: #5e81ac }
        'arc-dark':                 { BG: #343944, FG: #c1c8d1, AC: #5294e2 }
        'moonlight':                { BG: #1e2030, FG: #c8d3f5, AC: #82aaff }
        'monokai':                  { BG: #272822, FG: #e8e8e3, AC: #fd9720 }
        'horizon':                  { BG: #1c1e26, FG: #d5c1ac, AC: #E95378 }
        'doom-one':                 { BG: #21242b, FG: #bbc2cf, AC: #51afef }
        'deep-dark':                { BG: #111111, FG: #eff0f1, AC: #00adee }
        'brave-dark':               { BG: #222222, FG: #d6d6d6, AC: #f96234 }
        'twilight':                 { BG: #171717, FG: #f7f7f7, AC: #8f9d6a }
        'ubuntu':                   { BG: #2c071a, FG: #f2f1ef, AC: #ef7847 }
    }

    // Select active color-scheme and define global variables for background color, foreground color, and accent color
    for color-scheme in ColorSchemes {
        if (color-scheme == cg_theme) {
            define('BG', ColorSchemes[color-scheme].BG, global)
            define('FG', ColorSchemes[color-scheme].FG, global)
            define('AC', ColorSchemes[color-scheme].AC, global)
        }
    }

    // Color values or hues. https://en.wikipedia.org/wiki/Hue - In color theory, hue is one of the main properties (called color appearance parameters) of a color, defined technically in the CIECAM02 model as "the degree to which a stimulus can be described as similar to or different from stimuli that are described as red, orange, yellow, green, blue, violet,"[1] which certain theories of color vision call unique hues.
    colors = (
        { key: bg, color:   BG } \
        { key: fg, color:   FG } \
        { key: v0, color:   AC } \
        { key: v1, hue:   0deg } \
        { key: v2, hue:  30deg } \
        { key: v3, hue:  60deg } \
        { key: v4, hue:  90deg } \
        { key: v5, hue: 180deg } \
        { key: v6, hue: 210deg } \
        { key: v7, hue: 270deg } \
        { key: v8, hue: 300deg } \
        { key: v9, hue:   0deg } \
    )

    // Alias colors.
    $bg = colors[0]
    $fg = colors[1]

    /* convert color code to HLSA format
    https://stylus-lang.com/docs/bifs.html
    */
    to_hsla(input) {
        $h = {}
        $h.hue = unquote(split('deg', '%s' % ceil(hue(input), 2))[0])
        $h.saturation = ceil(saturation(input), 2)
        $h.lightness = ceil(lightness(input), 2)
        s('hsla(%s,%s,%s,1)', $h.hue, $h.saturation, $h.lightness)
    }

    /*
    Dynamically generate background-colors, forground-colors, and other color codes
    mainly by using darken, lighten, and hsl functions to adjust colors based on base-colors.
    In this way, it's not necessary to define variables for different color codes.
    It will define variables for background-colors, forground-colors, and other color codes:
    background-colors: bg0, bg1 ... bg5
    foreground-colors: fg0, fg1 ... fg5
    background-colors: v00 v01 ... v09, v10 v11 ... v19, ... v90, v91 ... v99
    */
    // 1. Generate background colors.
    for num in 0..9 { // QUESTION - CAN WE USE VARIABLE HERE TO REPLACE 9?
        $color = $bg.color
        if num == 1 {} // Skip base BG color.
        else if num == 0 { $color = darken($color, 10%) }
        else { $color = lighten($color, (num+2) * num/2%) }
        $color = to_hsla($color)

        $key = s('%s%s', $bg.key, num)
        $val = 'var(--%s-%s)' % (($bg.key) (num))
        define('$' + $key, $color, global)
        define('' + $key, $val, global)
    }

    // 2. Generate foreground colors.
    for num in 0..9 {
        $color = $fg.color
        if num == 1 {} // Skip base FG color.
        else if num == 0 { $color = lighten($color, 10%) }
        else { $color = darken($color, (num + num/1.25) * 5%) }

        $color = desaturate($color, 90%)
        $color = to_hsla($color)
        $key = s('%s%s', $fg.key, num)
        $val = 'var(--%s-%s)' % (($fg.key) (num))
        define('$' + $key, $color, global)
        define('' + $key, $val, global)
    }

    // 3. Generate all other colors. TODO - LEARN HOW TO TUNE COLORS WITH ARGUMETNS OF FUNCTIONS LIKE DARKEN AND LIGHTNESS
    for c, i in colors[2..length(colors)] {
        $sel_color  = colors[i+2]
        $dbg += ' ' + $sel_color

        for num in 0..9 {
            /// Case for accent colors.
            if ($sel_color.key == v0) {
                $color = darken($sel_color.color, (80% - ((num + num/3) * 7.5)))
                $color = darken($sel_color.color, (100% - (num+3) * 7.5))
                $color = lightness($color, lightness($color) + num)
            }

            /// Case for gray colors.
            else if ($sel_color.key == v9) {
                $color = hsl($sel_color.hue, 0%, 50% + cg_lig)
                $color = darken($color, (100% - (num+2) * 17))
            }

            /// Case for RGB colors.
            else {
                $hue   = $sel_color.hue
                $color = hsl($hue, 60% + cg_sat, 60% + cg_lig)
                $color = darken($color, (100% - (num+2) * 7.5))
                $color = lightness($color, lightness($color) + num)
            }

            /// Convert to HSLA format. - QUESTION - WHY DO WE NEED TO CONVERT TO HSLA?
            $color = to_hsla($color)

            $key = s('%s%s', $sel_color.key, num)
            $val = 'var(--%s-%s)' % (($sel_color.key) (num))
            define('$' + $key, $color, global)
            define('' + $key, $val, global)
        }
    }
} /*END: Color Framework*/

fw      = 400 // QUESTION - WHAT'S THE DIFFERENCE TO DEFINE VARIABLE IN THIS WAY AND USING define() FUNCTION?
bdw     = 0.5px
bdr     = 6px
btr     = 3px
wide_screen_min_width = 2000px
wide_screen_min_height = 1200px

widest_screen_min_width = 3000px
widest_screen_min_height = 1800px
// }}}

/*svg mixin - TODO: check how to use this*/
to_svg(input) {
    s('\%23%s', unquote(substr(s('%s', convert(input)), 1, 6)))
}

/*svg mixin to set fill and stroke
https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes
*/
g(x, y = 0, xi = 1, yi = 1) {
    if x != 0 && x != '_' {   fill: xi is 0 ? x : x i }
    if y != 0 && y != '_' { stroke: yi is 0 ? y : y i }
}

/*
CSS file to provide common style variables, classes).
v0.1
2022-01-13
*/
@charset "UTF-8";
/**********************************************************
common part:
global variables and basic common classes
**********************************************************/
/*global variables:
define reusable variables and reuse for specific scenarios
*/
:root {
    // size variables
    --font_size:                (f_size)px;
    --code_font_size:           (f_size + 1)px;
    @media screen and (min-width: wide_screen_min_width) {
        --font_size:            (f_size * 1.25)px;
        --code_font_size:       ((f_size + 1) * 1.25)px;
    }
    @media screen and (min-width: widest_screen_min_width) {
        --font_size:            (f_size * 1.5)px;
        --code_font_size:       ((f_size + 1) * 1.5)px;
    }

    // color variables
    colors = (bg fg v0 v1 v2 v3 v4 v5 v6 v7 v8 v9)
    for color in colors[0..1] {
        for tone in 0..9 {
            { '--%s-%s' % ((color) (tone)) }: $ + color + tone
        }
    }
    for color in colors[2..length(colors)] {
        for tone in 0..9 {
            { '--%s-%s' % ((color) (tone)) }: $ + color + tone
        }
    }
    // headlines sizes variables
    h_prefix = h
    for s in 1..6 {
        { '--%s%s' % ((h_prefix) (s)) }: s('%s', (45 - (s * 5))px)
    }

    // padding and margin sizes: x1 .. x8 - 3px .. 24px
    t_stps = 8; x_pre = x; x_stp = 3;
    for s in 1..t_stps {
        { '--%s%s' % ((x_pre) (s)) }: s('%s', (s * x_stp)px)
    }
}

// base color guielines
red     = v15
orange  = v25
yellow  = v35
green   = v45
cyan    = v55
blue    = v65
magenta = v75
violet  = v85
white   = fg0

// code syntax color variables, color short names
cr        = var(--v1-9)
co        = var(--v2-7)
cy        = var(--v3-7)
cg        = var(--v4-5)
cc        = var(--v5-7)
cb        = var(--v6-9)
cm        = var(--v7-9)
cv        = var(--v8-7)
ca        = var(--v9-7) // gray

// background-colors
// - sysbar, navibar, footer
bs      = var(--bg-1)
// - head, sub-navibar, appbar
bd      = var(--bg-2)
// - default background-color
bg      = var(--bg-3)
// - area background-color
bga     = var(--bg-4)
// - code background-color
bgc     = var(--bg-4)
// - code background-color
bgp     = var(--bg-5)
// - label background-color
bgl     = var(--bg-6)
// - search result background-color
bgs     = var(--v3-6)

// - accent color, used for highlight, links
ac      = AC          // scrollbar, links
hl      = co          // highlight
er      = red         // error
wr      = orange      // warning
nt      = cyan        // note
tp      = green       // tips
fglk    = ac          // fg of link
fghsb   = var(--bg-5)
fgsb    = ac          // fg of scrollbar
bgsb    = bs          // bg of scrollbar
sw      = 8px         // width of scrollbar (vertical)
sh      = 8px         // height of scrollbar (horizontal)

// font variables: default font color, code font color, default font family, code font family, default font size, code font size
fg      = fg3
fgs     = bg2
fghl    = fg0
fgc     = fg2
ff      = "Ericsson Hilda", Arial, Helvetica, Sans-serif, Courier, Courier-New
ffc     = courier,courier-new
fs      = var(--font_size)
fsc     = var(--code_font_size)
fgl     = white

// border variables: size, radius, and color
bdc     = bg5

// button variables
fgbt    = white
bgbt    = ac
btsc    = hl

// padding and margin
// same element: x1; elements: x2; sections: x3; blocks: x4; containers: x8
x1     = var(--x1)
x2     = var(--x2)
x3     = var(--x3)
x4     = var(--x4)
x5     = var(--x5)
x6     = var(--x6)
x7     = var(--x7)
x8     = var(--x8)

// height variables
shh     = 3em             // header height
ahh     = 2.5em           // sub-header height
st      = shh             // top position if sysbar exists
at      = shh + ahh       // top position if sysbar exists
ih      = 2em             // input height
tmh     = 5em             // textarea height
logoh   = 2em             // logo height
coreh   = 50em            // core body height
clh     = 1.5em           // code line-height



/*EDS START*/
//////////////////////////////////////////////////////////////////
//0c0c0c, 181818, 242424
star(x){
    * {box-sizing: border-box}
    div {display: block}
}

appbar(x) {
    width: 100%;
    line-height: 48px;
    height: 48px;
    background: #181818;
    color: #f2f2f2;
    position: relative;
}

appbody(x){
    display: flex; flex-direction: column; flex-grow: 1
    overflow: hidden; height: calc(100vh - (48px + 48px));
}

appnav(x){
    transition: margin-right 250ms cubic-bezier(.65,.05,.36,1),opacity 250ms cubic-bezier(.65,.05,.36,1) .1s,margin-left 125ms cubic-bezier(.65,.05,.36,1);
    flex: 0 0 auto; opacity: 1
    width: 248px; height: calc(100vh - (48px + 48px)); margin:0;
}

appcontent(x){
    transition: margin-left 1s cubic-bezier(.65,.05,.36,1) .5s;
    flex-basis: 100%; flex-grow: 1;
    overflow-y: auto; height: 100%;
}

tile(x){
    c:fg bga
    display: flex; flex-direction: column; flex-basis: 100%;
    height: auto; padding: x5; margin-bottom: x1; background-clip: padding-box;
}

header(x){
    display: flex; flex: 0 0 auto; margin-top: 0; padding-bottom: x8;
}

content(x) {
    flex: 1
}

/*row represents one "row" in the parent container. one parent container may have one or more rows.*/
row(x){
    display: flex; flex-flow: row wrap; flex: 0 0 100%
}

//////////////////////////////////////////////////////////////////
/*EDS END*/

label(x, y){
    bc: x y;
    border: solid bdw bdc i; border-radius: bdr i;
}

// button - x: button foreground; y: button background and border color; z: border radius; k: selected button background and border color
bt(x = 0, y = 0, z = btr, k = 0, xi = 1, yi = 1, zi = 1, ki = 1) {
    if x != 0 && x != '_' { &, & *, &:before, & *:before, &:after, & *:after {color: xi is 0 ? x : x i};
    &>svg, &:before, &:after {margin: auto i}
    &>svg {fill: xi is 0 ? x : x i}}
    &:before {left:x1 i; margin-right:x1 i; position: relative i}
    &:after {right:x1 i;margin-left:x1 i; position: relative i}
    if y != 0 && y != '_' {
        &, & *, &:hover, & *:hover {
            border: solid bdw yi is 0 ? y : y i;
            border-color: yi is 0 ? y : y i;
            background-color: yi is 0 ? y : y i;
            background-image: unset;
        }
    }
    if z != 0 && z != '_' { border-radius: zi is 0 ? z : z i; }
    padding-left: x2 i; padding-right: x2 i; padding-top: x1 i; padding-bottom: x1 i;
    if k != 0 && k != '_' {
        padding-left: 0 i; padding-right: 0 i; padding-top: 0 i; padding-bottom: 0 i;
        b:b_f
    };
    text-align: center i; vertical-align: middle i;
    font-weight: fw i; font-size: fs i;
    line-height: unset;
    min-width: 60px; min-height: 2em;
    box-shadow: unset i;
    -webkit-box-shadow: unset i;
    &>[class*="button"], &>[class*="button"] *, &>[class*="btn"], &>[class*="btn"] *, &>button, &>button *{
        padding:0px i; border-width: 0px i;
    }
}

/*
x: foreground color
y: background color
z: top
*/
core(x, y, z = bdw, zi = 1){
    &, & * {z-index: 0 i}
    c:x y; top: zi is 0 ? z : z i; position: relative;
    min-height: coreh i;
    margin: auto i; margin-top: x8 i; margin-bottom: x8 i;
    min-width: 60%; max-width: 100%;
    @media screen and (min-width: wide_screen_min_width){
        max-width: 85%;
    }
    border-width: 0px i
}

/**
* mixin for color setting. no box shadow.
* arguments:
* x - foreground,
* y - background,
* z - border color(background and border),
* r - border radius
* b - background
*
* usage:
* c: fg bdc bg - to set color, border-color, and background-color
* c: fg bdc bg 1 1 1 - to set color, border-color, and background-color with !important annotation
* c: 0 bdc - only set border-color without !important annotation
*
* note: regex c:[^;(}\*]*bdc[^;\*}(]*(0|1) to search all occurrences with complex usage
*/
c(x, y = 0, z = 0, r = 0, b = 0, xi = 1, yi = 1, zi = 1, ri = 1, bi = 1) {
    if x != 0 && x != '_' { color: xi is 0 ? x : x i }
    if y != 0 && y != '_' { background-color: yi is 0 ? y : y i}
    if z != 0 && z != '_' { border: zi is 0 ? solid bdw z : solid bdw z i }
    if z != 0 && z != '_' { border-left: zi is 0 ? solid bdw z : solid bdw z i }
    if z != 0 && z != '_' { border-right: zi is 0 ? solid bdw z : solid bdw z i }
    if z != 0 && z != '_' { border-top: zi is 0 ? solid bdw z : solid bdw z i }
    if z != 0 && z != '_' { border-bottom: zi is 0 ? solid bdw z : solid bdw z i }
    if r != 0 && r != '_' { border-radius: ri is 0 ? r : r i } else {border-radius:0px}
    if b != 0 && b != '_' { background: bi is 0 ? b : b i }
    box-shadow: unset;text-shadow: unset;font-size: fs
}

// dialog, popup
p(x, y = bgp){
    c:x y; &, & * {z-index: 2 i;}
    border:solid bdw bd i;border-radius: bdr i;box-shadow: x3 x3 x3 bd i
}

// sub-dialog, sub-popup
sp(x){
    c:x bga;
    border:solid bdw bgc i
}

/*
block color and background color setting for blocks, containers such as sysbar, topbar, navbar, sidebar, etc.
*/
bc(x, y, z=0, xi = 1, yi = 1, zi=1){
    &, & *:not(a):not(a *):not(svg):not(pre):not(pre *):not(code):not(code *):not(cursor):not([class*="button"]):not([class*="button"] *):not([class*="btn"]):not([class*="btn"] *):not(button):not(button *){c:x y 0 0 0 xi yi}

    & *:not(a):not(a *):not(svg):not(input):not([class*="icon"]):not([class*="dropdown"]):not([class*="suggestion"]):not([id*="suggestion"]):not(pre):not(pre *):not(code):not(code *):not([class*="button"]):not([class*="button"] *):not([class*="btn"]):not([class*="btn"] *):not(button):not(button *):not([class*="header"]):not(cursor) {
        c:fg t 0 0 0 xi yi;
        if z !=0 && z!='_' {border-width: zi is 0 ? 0px : 0px i}
    }

    & a:not([class*="button"]):not([class*="button"] *):not([class*="btn"]):not([class*="btn"] *) {c:fglk t}
}

/*navibar mixin - top bars, side bars

top bars: margin - 0px, padding: x1, border-bottom: solid bdw bdc; no other boards
left side bars: margin - 0px, padding: x1, border-right: solid bdw bdc; no other boards
right side bars: margin - 0px, padding: x1, border-left: solid bdw bdc; no other boards
foot bars: margin - 0px, padding: x1, border-top: solid bdw bdc; no other boards

x: foreground, y: background, z: height, k: 1 - sysbar, appbar, 2 - left side bar, 3 - right side bar, 4 - app footer bar, 6 - sys footer bar
*/
sysbar     = 1
appbar     = 2
navbar_l    = 3
navbar_r   = 4
bar_footer  = 5
bar(x, y, z = sysbar, t = 0, xi = 1, yi= 1, zi = 1, ti = 1){
    & {
        bc:x y;
        line-height: unset i; float: unset;
    }
    &>& {border-bottom: solid 0px bdc i; border-top: 0px i; border-left: 0px i; border-right: 0px i}
    // sysbar
    if (z == sysbar) {
        & {
            max-height: shh i;min-height: shh i; top: 0px i;
            margin-left: 0px i; margin-right: 0px i; margin-top: 0px i; margin-bottom: 0px i; padding: 0px i
            width: 100% i; position: fixed i;left:0px i; right:0px i; z-index: 1 i;
            display: inline; align-items: center; justify-content: space-between;
            border-bottom: solid bdw bdc i
            border-top: 0px i; border-left: 0px i; border-right: 0px i;
        }
        & *:not(input[type="search"]):not(input[type="text"]) {
            padding-top: 0px i;padding-bottom: 0px i
        }
        & *:not([class*="dropdown"]):not([class*="dropdown"] *) {margin-top: 0 i; margin-bottom: 0 i; max-height: shh i;}
    }
    // appbar
    if (z == appbar) {
        & {
            max-height: ahh i;min-height: ahh i; top: t is 0 ? (ti is 0 ? shh : shh i) : (ti is 0 ? t : t i);
            margin-left: 0px i; margin-right: 0px i; margin-top: bdw i; margin-bottom: 0px i; padding: 0px i
            max-width: 100% i; width: 100% i;  position: fixed i;left:0px i; right:0px i; z-index: 1 i;
            display: inline; align-items: center; justify-content: space-between;
            border-bottom: solid bdw bdc i; background-image: unset i;
            border-top: 0px i; border-left: 0px i; border-right: 0px i;
        }
        &>*:not(input[type="search"]):not(input[type="text"]) {
            padding-top: 0px i;padding-bottom: 0px i
        }
        & * {margin-top: 0 i; margin-bottom: 0 i; min-height: auto i; max-height: ahh - bdw i;}
    }
    // left sidebar
    if (z == navbar_l) {
        & {
            max-width: 15%; min-width: auto; max-height: 100% - t; margin:0;
            margin-left: 0px i; margin-top: bdw; padding-right: 0px i
            border-right: solid bdw bdc i
            border-top: 0px i; border-bottom: 0px i;
            top: ti is 0 ? t : t i;left:0px; position: fixed;z-index: 0 i;
            & *:not(ul):not(li){
                left: unset i; right: unset i; top: unset i; bottom: unset i; position: unset i
            }
            overflow: scroll;
        }
    }
    // right sidebar
    if (z == navbar_r) {
        & {
            max-width: 15%; min-width: 15% i; max-height: 100% - t; margin:0;
            margin-right: 0px i; padding-right: 0px i;
            border-left: solid bdw bdc i
            border-top: 0px i; border-bottom: 0px i;
            top: ti is 0 ? t : t i;right:0px; position: fixed;z-index: 0 i;
            & *:not(ul):not(li){
                left: unset i; right: unset i; top: unset i; bottom: unset i; position: unset i
            }
        }
    }
    // footer
    if (z == bar_footer) {
        & {
            width: 100% i;
            min-height: shh i; padding-top: x3 i; padding-bottom: x3 i; margin-top: x8
            border-top: solid bdw bdc i
            border-bottom: 0px i; border-left: 0px i; border-right: 0px i;
            z-index: 0; position: relative
        }
    }
}

/*block control: b_f - flex, b_i - inline*/
b_f  = 100
b_i  = 200
f_ab = 101
f_ac = 102
f_jsa = 20
f_jsb = 21
f_jse = 22
f_jc = 23
f_js = 24
f_je = 25
b(x = b_f, y = f_ac, z = f_jc){
    if (x == b_i) {
        display: inline;
        if (y == f_ac) {
            align-items: center i;
        }
    }
    if (x == b_f) {
        & {
            display: flex i; flex-direction: row;
            // align-items
            if (y == f_ab ) {
                align-items: baseline i;
            }
            if (y == f_ac) {
                align-items: center i;
            }
            // justify-content
            if(z == f_jsa){
                justify-content: space-around i
            }
            if(z == f_jsb){
                justify-content: space-between i
            }
            if(z == f_jse){
                justify-content: space-evenly i
            }
            if(z == f_jc){
                justify-content: center i
            }
            if(z == f_js){
                justify-content: start i
            }
            if(z == f_je){
                justify-content: end i
            }
        }
    }
}

// invert anything
a_invert(x){
    -webkit-filter: invert(100%) i;
    filter: invert(100%) i;
}

s_invert(x) {
    fill:ac i
}

i_invert(x) {
    invert_value = x is 1 ? 80% : 0%
    filter: invert(invert_value); max-height: logoh i
}

/*logo image invert*/
logo_invert(x) {
    invert_value = x is 1 ? 80% : 0%
    if (x == 1){
        img[class*="logo"] {filter: invert(invert_value); max-height: logoh i};
        [class*="logo"],[id*="logo"] { img {filter: invert(invert_value); max-height: logoh i}}
        //a[class*="logo"] {&, & * {background-image: linear-gradient(90deg, bg3 0%, bg4 50%, bg3)}}
        a[class*="logo"] {
            grad = 45deg, t 25%, t 25%, t 75%, t 75%, t 100%;
            &, & * {background-image: linear-gradient(grad), linear-gradient(grad) i;}
        }
    }
}

/* NOTE: To wrap text */
w(xi){
    if (xi == 1) {
        white-space: pre-wrap;
        white-space: -moz-pre-wrap;
        white-space: -pre-wrap;
        white-space: -o-pre-wrap;
        word-wrap: break-word;
        word-break: break-all i;
        overflow-wrap: anywhere i;
    }
}

html, body[class*="eteamproject_internal_ericsson"]{
    max-width: 100% i; margin:auto i;
    * {
        caret-color: cm i;
    }
    & {c:fg bg}; *:before, *:after {c:ac t}; div{background-image: unset;}
    &, *:not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) {font-size: fs i}
    // scrollbar customization
    if (sb_enable) {
        /html{
            scrollbar-color: fghsb bgsb i;
            //https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width
            scrollbar-width: thin i;
            scrollbar-height: thin i;
        }
        *{
            scrollbar-color: fgsb bgsb i;
            //https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width
            scrollbar-width: thin i;
            scrollbar-height: thin i;
        }
        /html::-webkit-scrollbar {
            width: sw i; height: sh i;
            &-thumb { background: fghsb i; border-radius: 0px i; border-width: 0px i}
            &-track { background: bgsb i}
        }
        /::-webkit-scrollbar {
            width: sw i; height: sh i;
            &-thumb { background: fgsb i; border-radius: 0px i; border-width: 0px i}
            &-track { background: bgsb i}
        }
    }
}

/*jira - eteamproject.internal.ericsson.com */
body[class*="eteamproject_internal_ericsson"]{
    * {border-color: bdc i; background-color: bg; background: bg}
    /*containers, blocks, table*/
    #page {
        bc:fg bg 0 1 0; * {z-index: 0 i}
        div.syntaxhighlighter {
            div.line {c:fgc bgc; line-height: 1.5em i;font-family: ffc i; font-size: fsc i}
        }
        code, span.NormalTextRun, p.Paragraph {&, & * {c:fgc bgc; line-height: 1.5em i}}
        header#header {
            bar:fg bs;
            &>nav {
                border-width: 0 i;
                div[class^="aui-dropdown2 aui-style-default"] {
                    & ul.aui-list-truncate {
                        &, & li {padding: x1 i}
                        & li {line-height: 1.2em i; height: 1.2em i}
                    }
                    div[class^="aui-dropdown2-section"] {
                        margin-top:x1 i;border-radius: 0 i;border-top:solid bdc bdw i
                    }
                    img.icon {top:0 i}
                }
                .aui-dropdown2-trigger:not(.aui-dropdown2-trigger-arrowless):before{top:auto i;}
            }
        }
        // DE3 Ticket Creaation Page
        section#content-wrapper {core:fg bga; bc:fg bga; min-width: 80% i}

        .ia-splitter-left {bar:fg bd navbar_l shh;width: auto i;}
        #main {
            margin-top: 0 i;margin-right: 0 i; div#main-header{top:unset i;position: relative i}; a.assistive{display: none i}
            .ghx-backlog-container .ghx-issues, div[class*="ghx-issues"] {padding: 0 0 i;margin: 0 0 i}
            .ghx-move-count {display: none i}
            &>div.issue-view>div.navigation-tools {display: none i}
            div#ghx-content-main{
                div.ghx-swimlane-header {top:0 i; position: sticky i}
            }
            &>div.issue-view{
                &>.issue-container .issue-header {z-index: 0 i}
            }
            div.ghx-view-section {&>button[class*="aui-button"]{c:hl t;}}
            .aui-button{--aui-btn-text:hl i}
            div[class*="ghx-backlog-header"] {z-index: 0 i}
        }
        #content {
            top: shh; position: relative; margin-top: x8 i; &>main#main{margin-left:15% i; }
            &>section#sidebar{
                bar:fg bd navbar_l shh; max-width: 15% i
                &>div.aui-sidebar-wrapper {height:auto i; width: 100% i}
            }
            aui-dropdown-menu {bc:fg bg}
            .ghx-column {padding: x1 i}; .navigator-item-count-number {c:hl t}
            #ghx-pool-wrapper {
                & *:not([class*="js-issue"]):not([class*="js-issue"] *){c: fg bg};
            }
            .ghx-grabber-transparent {display: none i}
            .js-issue, div[class*="gadget-container"] {
                &, & *:not(a):not(a *){c:fg bga}
                & {box-shadow: x3 x3 x3 bd i; border: solid bdw bdc i; border-radius: bdr i; margin-bottom: x3}
                .ghx-issue-content{padding: x2 i}
            }
            .details-layout .split-view .list-results-panel .list-panel {
                bc:fg bd;
                & .issue-link-summary {c: fg t}
                & .issue-list {
                    & {padding: x1 i}
                    &>li {c: fg bd; padding: x1 i;& div {padding: x1 i}}
                    &>li.focused {& *{c:fghl hl}}
                }
            }
            // issue detail
            div#ghx-detail-view {
                span.ghx-project-avatar {display: none i}
            }
            //jira ticket comment
            .sd-comment-issue-page-view-root, .activity-comment {
                .aui-lozenge-complete.aui-lozenge-subtle, .aui-lozenge-new.aui-lozenge-subtle {label:fgl bgl}
            }
            // links hierarchy
            #lh_tree_chart {c:fg bg}
        }
        footer {display: none i}
    }
    .aui-page-panel{
        bc:fg bg; margin-left: 15% i; margin-right: 0 i; padding-left: x8 i;
        border-width: 0px i; max-width: 80% i;
        &>div.aui-page-panel-inner>div.issue-navigator>main#main{margin-left: 0 i}
    };
    section#create-subtask-dialog, section#create-issue-dialog, div#edit-comment, div#link-issue-dialog, div[class*="aui-popup"]{
        border:solid bdw hl i;border-radius: bdr i;box-shadow: x3 x3 x3 bd i
    }
    div#link-issue-dialog{button{margin-bottom: x2 i}}
    .ajs-layer.box-shadow, .aui-dialog2.aui-layer .aui-dialog2-content, .aui-dialog2-footer, form.aui .jira-wikifield~.save-options.wiki-button-bar, .sd-rte-bar, section#create-subtask-dialog, section#create-issue-dialog, div#edit-comment, div#link-issue-dialog, div[class*="aui-popup"], div[class*="aui-dialog"], aui-dropdown-menu{
        c:fg bga bdc; background: bga i; background-color: bga i;
        div,ul,li {c:fg bga}
        div[class*="save-options"]{padding: x2 0 i}
        h2[class="dialog-title"]{c:white hl; padding: x2 i;b:b_f;border-bottom: solid bdw bdc i}
        div[class*="aui-navgroup-inner"]{padding: 0 0 i}
        &>header{c:fg t;border-bottom:solid bdw bdc i}
        &>footer {bc:fg t;padding: 0 0 i; border-top:solid bdw bdc i}
        &>header, &>footer {
            b:b_f f_ac f_jsb; height: 3em i;
            & div[class*="buttons"]{
                bc:fg t;height:90% i;b:b_f f_ac f_jsb;
                &>label{&, *{c:fg t}}
            }
        }
        .dialog-button-panel {border-top: solid bdw bdc i; b:b_f f_ac f_je}
        button:not([class*="toggle"]):not([class*="subtle"]):not([class*="value-item"]){bt:fgbt bgbt}
        a[class*="button-panel-cancel-link"]{bt:fgbt gray btr 1}
        input[type="submit"]{bt:fgbt hl}
        button[class*="toggle"],button[class*="subtle"], button[class*="value-item"]{c:fg bga}
        * {
            button:first-child{margin-left: 0 i;margin-right: x1 i};
            button:last-child{margin-left: x1 i;margin-right: 0 i}
        }
    }
    div.issue-body-content {
        padding: x3; .ops {background-color: bg i;}
        #description-val{c: fgc bgc bdc btr 0 0 1 0 1 0;& *:not(a){c:fgc t}}
    }
    #issue-content {
        c:fg bga; ul.labels li .lozenge {label:fgl bgl}
    }
    #addcomment-inner{
        width: 100% i; .mod-footer {justify-content: end i}
        &, & * {c: fg t}; & {margin-right: -15px; float: right;}
    };
    .issue-data-block.focused {c:fg bg}
    #gerrit-reviews-left-panel {width: 99% i;border-width: 0px i}
    p[class*="hint-container"]{c:hl t; &>kbd{c:fg bd bdc btr}}
    /*border*/
    #announcement-banner, .alertHeader, .preformatted.panel {border-width: 0px i}; a.lozenge {label:fgl bgl}
    .issue-drop-zone {border:dashed bdw bdc}
    #attachmentmodule #attachment_thumbnails .attachment-content .attachment-thumb {border: solid bdw bdc; margin-left: x1 i}
    thead {border-width: 0px i;}; a.aui-button{border-width: 0px i}
    /*button, icon, link*/
    div.wiki-edit-undo-redo-buttons {border-width: 0px i; float: unset;}
    .aui-button-primary, #footer-comment-button {
        bt:fgbt bgbt;b:b_f; &>span.aui-icon{display: none i}
    };
    .aui-buttons .aui-button~.aui-button, .aui-button {margin-left: 0px;border-width:0px i}
    button.aui-iconfont-appswitcher {padding: x1 i}; .aui-dd-parent {&>button {border-width: 0px i}}
    span.aui-icon {
        &:before {c:fg t}; &{c:t t; text-indent: -3000px;}
    }
    nav.editor-toggle-tabs {c:fg t; border-width:0px i}
    /*hidden*/
    span.aui-iconfont-appswitcher {c:bd bs};
    span.blender, span.aui-iconfont-down, #issue-tabs::before {display: none i}
}
